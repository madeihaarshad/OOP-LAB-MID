#include <iostream>
#include<fstream>
#include <string>
#include <ctime>

using namespace std;

// Base Class
class TimeSlot {
protected:
    string time;
    string day;

public:
    TimeSlot(string t, string d) : time(t), day(d) {}

    string getTime() const {
        return time;
    }

    string getDay() const {
        return day;
    }
};

//Derived Class
class Reservation : public TimeSlot {
private:
    string customerName;
    string phoneNumber;
    int numPeople;

public:
    Reservation(string name, string phone, string t, string d, int people) : customerName(name), phoneNumber(phone), TimeSlot(t, d), numPeople(people) {}

    string getCustomerName() const {
        return customerName;
    }

    string getPhoneNumber() const {
        return phoneNumber;
    }

    int getNumPeople() const {
        return numPeople;
    }
};

//  Restaurant class
class Restaurant {
private:
    static const int MAX_TIME_SLOTS = 9;
    TimeSlot* availableTimeSlots[MAX_TIME_SLOTS];
    Reservation* reservations[MAX_TIME_SLOTS];
    int numAvailableSlots;
    int numReservations;

public:
    Restaurant() {

        string days[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
        int dayIndex = 0;
        for (int i = 12; i <= 20; ++i) {
            availableTimeSlots[i - 12] = new TimeSlot(to_string(i) + ":00", days[dayIndex]); // Assigning days cyclically
            if (++dayIndex >= 7) dayIndex = 0;
        }
        numAvailableSlots = MAX_TIME_SLOTS;
        numReservations = 0;
    }

    void displayAvailableTimeSlots() const {
        cout << "*******************************" << endl;
        cout << "Available Time Slots:" << endl;
        cout << "*******************************" << endl;
        for (int i = 0; i < numAvailableSlots; ++i) {
            cout << "Day: " << availableTimeSlots[i]->getDay() << ", Time: " << availableTimeSlots[i]->getTime() << endl;
        }
    }

    bool makeReservation(string time, string day, string name, string phone, int numPeople) {
        for (int i = 0; i < numAvailableSlots; ++i) {
            if (availableTimeSlots[i]->getTime() == time && availableTimeSlots[i]->getDay() == day) {
                delete availableTimeSlots[i];
                for (int j = i; j < numAvailableSlots - 1; ++j) {
                    availableTimeSlots[j] = availableTimeSlots[j + 1];
                }
                numAvailableSlots--;
                reservations[numReservations++] = new Reservation(name, phone, time, day, numPeople);
                cout << "Successfully Reserved" << endl;
                cout << "Reservation made for " << name << " at " << time << " on " << day << ". Contact: " << phone << ". Number of people: " << numPeople << endl;
                return true;
            }
        }
        cout << "Sorry, the requested time slot is not available." << endl;
        return false;
    }

    void displayReservations() const {
        cout << "Current Reservations:" << endl;
        for (int i = 0; i < numReservations; ++i) {
            cout << "Name: " << reservations[i]->getCustomerName() << ", Time: " << reservations[i]->getTime() << ", Day: " << reservations[i]->getDay() << ", Contact: " << reservations[i]->getPhoneNumber() << ", Number of people: " << reservations[i]->getNumPeople() << endl;
        }
    }

    ~Restaurant() {
        for (int i = 0; i < numAvailableSlots; ++i) {
            delete availableTimeSlots[i];
        }
        for (int i = 0; i < numReservations; ++i) {
            delete reservations[i];
        }
    }
};


void userInterface(Restaurant& restaurant) {
    cout << "*******************************************************" << endl;
    cout << "           Welcome to Hungry Brunch Restaurant Reservation System!" << endl;
    cout << "*******************************************************" << endl;
    while (true) {
        cout << "1. View available time slots" << endl;
        cout << "2. Make a reservation" << endl;
        cout << "3. View current reservations" << endl;
        cout << "4. Exit" << endl;
        cout << "-----------------------------------------" << endl;
        int choice;
        cin >> choice;
        ofstream myfile("xyz.txt");
        myfile.open("xyz.txt");
        myfile << choice;
        myfile.close();
        switch (choice) {
        case 1:
            cout << endl;
            restaurant.displayAvailableTimeSlots();
            cout << endl;
            cout << "-----------------------------------------" << endl;
            break;
        case 2: {
            cout << endl;
            string name, phone, time, day;
            int numPeople;
            cout << "Enter your name: ";
            cin >> name;
            cout << "Enter your phone number: ";
            cin >> phone;
            cout << "Enter preferred reservation time (in HH:MM format): ";
            cin >> time;
            cout << "Enter the day for reservation: ";
            cin >> day;
            cout << "Enter the number of people: ";
            cin >> numPeople;
            cout << endl;
            cout << "-----------------------------------------" << endl;
            if (restaurant.makeReservation(time, day, name, phone, numPeople)) {
                char choice;
                cout << "Do you want to make another reservation? (y/n): ";
                cin >> choice;
                
                if (choice != 'y' && choice != 'Y') {
                    cout << "*******************************************************" << endl;
                    cout << "         Thank you for using Restaurant Reservation System!" << endl;
                    cout << "               We look forward to serving you again!" << endl;
                    cout << "*******************************************************" << endl;
                    return;
                }
            }
            break;
        }
              
        case 3:
            cout << endl;
            restaurant.displayReservations();
            cout << endl;
            cout << "-----------------------------------------" << endl;
            break;
        case 4:
            cout << "*******************************************************" << endl;
            cout << "         Thank you for using Restaurant Reservation System!" << endl;
            cout << "               We look forward to serving you again!" << endl;
            cout << "*******************************************************" << endl;
            return;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
    }
}


int main() {
    Restaurant restaurant;
    userInterface(restaurant);

    return 0;
}
